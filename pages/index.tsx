/** @jsxImportSource theme-ui */
import Head from "next/head";
import { useState } from "react";
import Navbar from "../src/components/Navbar/Navbar";
import Menu from "../src/components/Menu/Menu";
import UnitList from "../src/components/UnitList/UnitList";

import { unstable_getServerSession } from "next-auth/next";
import { authOptions } from "./api/auth/[...nextauth]";
import type { GetServerSidePropsContext } from "next";
import type { Session } from "next-auth";

export default function Home(user: { session: Session }) {
  // const [menuToggle, setMenuToggle] = useState<boolean>(true);

  return (
    <>
      <Head>
        <title>Homes Park Manager</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
        <script
          src="https://kit.fontawesome.com/55cdc9cb8f.js"
          crossOrigin="anonymous"
        ></script>
      </Head>
      <main>
        <Navbar />
        {user && (
          <div sx={{ display: "flex", justifyContent: "center" }}>
            <section
              sx={{
                width: "75%",
                height: "100vh",
                backgroundColor: "lightblue",
              }}
            >
              <span sx={{
                variant: "containers.pictureBox",
                height: '140px',
                position: 'absolute',
                top: '100px',
                marginLeft: '50px',
                }} />
            </section>
            {/* <Menu menuToggle={menuToggle} setMenuToggle={setMenuToggle}/>
              <div sx={{
                variant: 'containers.mainPageCont',
                left: '35px',
                ...(menuToggle && {
                  variant: 'containers.mainPageCont',
                  left: '155px'
                })
              }}>
              <UnitList/>
              </div> */}
          </div>
        )}
      </main>
    </>
  );
}
export async function getServerSideProps(context: GetServerSidePropsContext) {
  const session = await unstable_getServerSession(
    context.req,
    context.res,
    authOptions
  );
  if (!session) {
    return {
      redirect: {
        destination: `api/auth/signin?callbackUrl=${process.env.REDIRECT_URL}`,
        permanent: false,
      },
    };
  } else {
    const { user } = session as any;
    return {
      props: user,
    };
  }
}
